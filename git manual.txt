git 최초 설정
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
$ git config --list // git 설정 확인

$ git init  // git 작업영역 생성
$ git status // 파일 상태 확인
$ git add . //  파일 추가(. = (변경된 모든 파일))
$ git commit -m "message" // 최초 설정의 유저 설정을 해야됨
$ git log // 헤더에 기록된 로그
$ git reset --hard [log] // 로그의 지점로 돌아감 (hard(파일 포함 전체 리셋), mixed, soft(로그 변경시사용))
$ git reflog // 모든 로그를 볼 수 있음(리셋까지)
$ git commit --amend -m "message" // 최종 로그 변경
$ git rebase -i HEAD ~3 // 로그 정리
-> vi 에디터 -> i 입력모드 -> 로그 변경 -> exe -> : -> wq

origin(github)
로컬 저장소(git 폴더)

1. git init // git 시작
2. git remote add origin [깃허브 주소] // github와 연결
( git ls-remote // github 연결 확인)
3. git fetch origin // github 파일 다운로드
4. git push origin master // 파일 업로드(push = 업로드 + Merge)
4. git branch [master] // Master 브랜치 생성
5. git clone // Master(Main) 동기화
6. git checkout -b dev origin/dev // origin의 dev 브랜치 동기화

혼자 프로젝트 시
1. github에서 repository 생성(add a README file 체크)
2. 로컬에서 git clone [주소] // git bash or 비주얼 스튜디오 코드 - 터미널 - new terminal - 폴더 선택 - bash 선택(git bash) 에서 작업해도 됨
3. git checkout -b dev // dev 브랜치 생성 및 브랜치 이동
4. git checkout -b setting_topic // 환경설정 토픽 브랜치 생성 및 브랜치 이동
5. touch [파일명 ex. 환경설정.txt] // 환경설정 텍스트 파일 생성 ex. 필요한 라이브러리 다운, 패키지 정리, 인터페이스 구조정리 등
6. README 파일에 내용 업데이트 ex. ### 기능 정리\n -환경설정\n -회원가입\n -로그인\n -글쓰기
7. git add .
8. git commit -m "[로그 내용 ex. 환경설정 완료]"
9. git checkout dev // dev 브랜치로 이동
10. git merge --no-ff setting_topic // 패스트포워드 merge(--no-ff 패스트포워드 관계에서도 merge시 로그 남김) >> :wq
(혼자 개발시에는 토픽 브랜치 삭제 안하는걸 추천)
11. git checkout -b join_topic // join_topic 브랜치 생성 및 브랜치 이동
12. 개발
13. git add .
14. git commit -m "[로그 내용 ex. 회원가입 완료]"
15. git checkout dev // dev 브랜치로 이동
16. git merge --no-ff join_topic // dev 브랜치에 join_topic 패스트포워드 merge 및 로그 생성
17. git checkout -b login_topic // login_topic 브랜치 생성 및 브랜치 이동
18. 개발
19. git add .
20. git commit -m "[로그 내용 ex. 로그인 완료]"
21. git checkout dev // dev 브랜치로 이동
22. git merge --no-ff login_topic // dev 브랜치에 login_topic 패스트포워드 merge 및 로그 생성
23. git checkout -b write_topic // write_topic 브랜치 생성 및 브랜치 이동
24. 개발
-------------------------------------- 개발 미완료
25. git add .
26. git commit -m "[로그 내용 ex. 로그인 아직 안됨 db남음]"
27. git add .
28 git commit -m "[로그 내용 ex. 로그인 완료]"
-------------------------------------- rebase
29. git rebase -i HEAD~2 // 로그 2개 rebase(압축) >> i키 >> 삭제할 내용 pick 남길 내용 s >> esc >> :wq >> i키 >> 지울 내용 삭제 >> esc >> :wq
30. git log // 로그 확인
31. git checkout dev // dev 브랜치로 이동
32. git merge --no-ff write_topic // dev 브랜치에 write_topic 패스트포워드 merge 및 로그 생성
33. 전체 제품 개발 완료시 git checkout main // main 브랜치로 이동
34. git merge --no-ff dev // dev merge 및 로그 생성
35. git tag [태그명 ex. blog 1.0.0] // 메인 브랜치에 태그 생성
36. git tag -n // 태그 확인
37. git push --tags origin main // github에 업로드(--tags : 태그가 있는 경우 태그까지 업로드)
38. git push origin dev // 지속적인 개발을 위해 dev도 업로드, Topic은 push할 필요 없음)

소규모 프로젝트 시
(팀장)
0. github의 repository 생성(README 체크)
1. git clone // 파일 다운로드
2. 환경설정
3. git add .
4. git commit -m "1. 환경설정 완료"
5. git checkout -b dev // dev 브랜치 생성
6. git push --all // 모든 브랜치 업로드
7. github의 setting - manage access에서 팀원 추가
8. github의 setting - branches - add rule - main, dev >> Require a pull request befor merging // branch 보호 >> 아무나 push 못함
9. github의 setting - Notifications - 알림 메일 추가
10. pull request 확인 - commit - Review Changes >> merge pull request 소규모에서는 팀장이(일반 merge(첫번째)를 추천) >> confirm merge

(팀원)
1. git clone // 파일 다운로드
2. git log // 작업 로그 확인
3. git branch // 브랜치 확인
4. git checkout -b dev origin/dev // 깃허브 브랜치를 내 작업영역에 동기화
5. git branch // 브랜치 확인
6. 코드 작업 실시
7. git checkout -b [브랜치 이름 ex. join_topic] // topic 브랜치 생성 및 브랜치 변경
8. git add .
9. git commit -m "2. 회원가입 완료" // 로그 생성
10. git log // 로그 확인
(git rebase -i HEAD~2 // 로그 2개 압축 >> i(입력모드) 누루고 삭제할 로그 pick 압축할 로그 s >> esc >> :wq >> i 누루고 삭제할 로그 삭제 >> esc >> :wq)
(rebase는 github에서 하면 안됨!! 로컬에서만 로그 작업할 것!!)
11. git push -f origin join_topic // github에 업로드(-f 는 강제로 업로드)
12. github의 Pull request - New qull request - base:dev, compare:join_topic // dev브랜치에 join_topic merge 요청
13. dev에 join_topic이 merge 되면 git push --delete origin join_topic // github의 join_topic 브랜치 삭제(로컬에서는 굳이 삭제할 필요 없음)
14. git checkout dev // dev 브랜치로 이동
15. git pull origin dev // dev 업데이트(추천) or git fetch origin // github에 있는 모든 파일 다운로드

룰 제작(for 팀원)
1. topic 브랜치 생성
2. 개발 다 하면
3. 로그 지저분하면 rebase로 로그 정리
4. topic 깃허브에 push
5. pr(pull request) 요청
6. 팀장이 승인 후 merge
7. merge 완료 후 github에 브랜치 삭제
8. dev 브랜치 pull 하기